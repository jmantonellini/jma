generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id    Int    @id @default(autoincrement())
  slug  String @unique
  name  String
  posts Post[] @relation("CategoryToPost")
}

model Country {
  id      Int     @id @default(autoincrement())
  name    String
  code    String  @unique
  visited Boolean @default(false)
  flag    String

  postId Int  @unique
  post   Post @relation(fields: [postId], references: [id])
}

model Post {
  id           Int           @id @default(autoincrement())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  slug         String        @unique
  published    Boolean       @default(false)
  authorId     String
  tags         String[]
  coverImage   String?
  proxyUrl     String?
  comments     Comment[]
  author       User          @relation(fields: [authorId], references: [id])
  categories   Category[]    @relation("CategoryToPost")
  country      Country?
  translations Translation[]
}

model Language {
  id           Int           @id @default(autoincrement())
  code         String        @unique
  name         String
  translations Translation[]
}

model Translation {
  id           Int     @id @default(autoincrement())
  languageCode String
  postId       Int
  title        String
  content      String?
  description  String

  post     Post?    @relation(fields: [postId], references: [id])
  language Language @relation(fields: [languageCode], references: [code])
}

model User {
  id            String    @id @default(uuid())
  username      String    @unique
  name          String?
  lastName      String?
  passwordHash  String
  userAuthToken String    @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  roleId        BigInt    @default(1)
  picture       String?
  description   String?
  Comment       Comment[]
  Post          Post[]
  role          Role      @relation(fields: [roleId], references: [id])
}

model Role {
  id    BigInt @id @default(autoincrement())
  name  String @unique
  users User[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String
  postId    Int
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Photo {
  id          Int     @id @default(autoincrement())
  url         String
  description String?
  alt         String?
  author      String?
  proxyUrl    String?
}
