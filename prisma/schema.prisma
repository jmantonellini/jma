// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Category {
  id    Int    @id @default(autoincrement())
  slug  String @unique
  name  String
  posts Post[]
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title       String
  content     String
  description String
  slug        String     @unique
  published   Boolean    @default(false)
  author      User       @relation(fields: [authorId], references: [id])
  authorId    String
  categories  Category[]
  tags        String[]
  Comment     Comment[]
  coverImage  String?
}

model Country {
  id      Int     @id @default(autoincrement())
  name    String
  code    String
  visited Boolean @default(false)
}

model User {
  id            String   @id @default(uuid())
  username      String   @unique
  name          String?
  lastName      String?
  passwordHash  String
  userAuthToken String   @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  role          Role     @relation(fields: [roleId], references: [id])
  roleId        BigInt   @default(1)
  picture       String?
  description   String?

  Post    Post[]
  Comment Comment[]
}

model Role {
  id    BigInt @id @default(autoincrement())
  name  String @unique
  users User[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  content String
  post    Post   @relation(fields: [postId], references: [id])
  postId  Int
  user    User   @relation(fields: [userId], references: [id])
  userId  String
}
